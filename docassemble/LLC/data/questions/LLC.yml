---
include:
  - docassemble.AssemblyLine:al_package.yml
---
modules:
  - docassemble.ReidelTheme.publish_to_webdav
---
metadata:
  title: |
    LLC
  short title: |
    LLC
  logo: |
    <img height="50px" class="ma_icon" src="/packagestatic/docassemble.IncorpForm/Reidel_logo.svg"><div class="title"></div>
  title url: |
    https://www.reidellawfirm.com/
---
default screen parts:
  logo: |
    <img height="50px" class="ma_icon" src="/packagestatic/docassemble.IncorpForm/Reidel_logo.svg"><div class="title"></div>
---
features:
  bootstrap theme: bootstrap.min.css
  css:
    - styles.css
---
mandatory: True
code: |
  interview_metadata
  if not defined("interview_metadata['LLC_form']"):
    interview_metadata.initializeObject("LLC_form")
    interview_metadata["LLC_form"].update({
      "al_weaver_version": "1.0.3",
      "generated on": "2021-07-28",
      "title": "LLC",
      "short title": "LLC",
      "description": "TO DO.",
      "original_form": "",
      "allowed courts": [
      ],
      "categories": [
      ],        
      "logic block variable": "interview_order_LLC_form",
      "attachment block variable": "LLC_form_attachment",
      "typical role": "na",
    })
---
code: |
  interview_short_title = "Form Your LLC in Texas"
---
code: |
  al_form_type = 'other_form'
---
objects:
  - organizer: ALPeopleList.using(ask_number=True,target_number=1)
  - managers: ALPeopleList.using(there_are_any=True,target_number=1)
  - users: ALPeopleList.using(ask_number=True,target_number=1)
  - members: ALPeopleList.using(there_are_any=True)
  - reimbursements: DAList.using(object_type=DAObject, there_are_any=True)
  - relationship_people_choices: DAList.using(auto_gather=False)
---
sections:
  - review_LLC_form: Review your answers
---
#################### Interview order #####################
id: interview_order_LLC_form
code: |
  # Set the allowed courts for this interview
  allowed_courts = interview_metadata["LLC_form"]["allowed courts"]
  nav.set_section('review_LLC_form')
  user_role = 'na'
  
  set_progress(11.00)
  users.gather(complete_attribute = "gather_complete2")

  set_parts(subtitle=str(users))
  
  business[0].address.address
  
  set_progress(22.00)
  if has_managers:
    managers.there_are_any = True
    managers.gather(complete_attribute = "gather_complete")
    
  members.there_are_any = True
  members.gather(complete_attribute = "gather_complete1")
 
  set_progress(33.00)
  if needs_formal_reimbursement:
     reimbursements[0].what
     reimbursement_amount = sum(r.amount for r in reimbursements)
  
  set_progress(55.00)
  filing_entity

  set_progress(77.00)
  supplemental
  
  set_progress(95.00)
  review_LLC_form
  
  for x in users + members:
    if x.ready_to_sign:
      x.special_signature_flow
  
  interview_order_LLC_form = True  
---
###################### Main order ######################
mandatory: True
code: |
  LLC_form_intro
  interview_order_LLC_form
  # Save anonymized interview statistics (customize the saved data below)
  store_variables_snapshot(data={'zip': users[0].address.zip})
  
  loading_warning_screen
  set_progress(100)
  LLC_form_publish
  LLC_form_download
---
code: |
  new_folder = get_new_bundle_path_name(al_recipient_bundle, filing_entity)
  for document in al_recipient_bundle:
    document['final'].path()
    document.filename

  try:
    publish_to_webdav(al_recipient_bundle, 
                      new_folder = new_folder,
                      )
    LLC_form_publish = True
  except Exception as e:
    publish_error = str(e)
    LLC_form_publish = False
---
comment: |
  This question is used to introduce your interview. Please customize
id: LLC
continue button field: LLC_form_intro
question: |
  Complete your LLC Form.
---
generic object: ALIndividual
template: users[0].person_type_label
content: |
  Are you a person or an organization?
---
generic object: ALIndividual
template: x.business_name_label
content: |
  Name of organization
---
generic object: ALIndividual
template: x.business_choice_label
content: |
  Organization
---
id: users name
sets:
  - users[0].name.first
  - users[0].name.last
question:  |
  Your Registered Agent Information
fields:
  - code: |
      users[0].name_fields(person_or_business='unsure')
  - code: |
      users[0].address_fields(show_country=True)
  - Who is the authorized person?: authorized_person
    show if:
      variable: users[0].person_type
      is: business
---
reconsider: True
code: |
  relationship_people_choices.clear()
  relationship_people_choices.extend(managers.complete_elements())  
  relationship_people_choices.extend(members.complete_elements())
  relationship_people_choices.extend(relationship_people_choices.complete_elements())
  relationship_people_choices.gathered = True
---
id: managers names
sets:
  - managers[i].name.first
  - managers[i].name.last
question:  |
  ${ capitalize(ordinal(i)) } Manager's Basic Information
fields:
  - code: |
      managers[i].name_fields(person_or_business='unsure')
  - code: |
      managers[i].address_fields(show_country=True)
---
id: members names
sets:
  - members[i].name.first
  - members[i].name.last
question:  |
  ${ capitalize(ordinal(i)) } Member's Basic Information
fields:
  - Existing person: members[i]
    datatype: object
    choices: relationship_people_choices
    disable others: True
    exclude: members.complete_elements()
  - code: |
      members[i].name_fields(person_or_business='unsure')
  - code: |
      members[i].address_fields(show_country=True)
---
id: business address
sets:
  - business[i].address.address
question:  |
  Principal Place of Business
fields:
  - Existing place: business[0].address
    datatype: object
    choices: 
      - users[0].address 
    object labeler: |
      lambda y: y.on_one_line()
    disable others: True
  - code: |
      business[0].address_fields(show_country=True)
---
generic object: ALIndividual
code: |
  x.name.first
  x.address.address
  x.ssn
  x.gather_complete2 = True
---
generic object: ALIndividual
code: |
  x.name.first
  x.address.address
  x.gather_complete = True
---
generic object: ALIndividual
code: |
  x.name.first
  x.address.address
  x.units
  x.gather_complete1 = True
---
id: ready to sign
generic object: ALIndividual
question: |
  Is ${x} ready to sign?
yesno: x.ready_to_sign
---
id: persons signature
generic object: ALIndividual
question: |
  ${x}, please sign below
subquestion: |
  You can select "Next" and have ${x} sign later.
signature: x.signature
required: False
under: |
  ${x}
#---
#code: |
#  signature_fields = ["users[0].signature"] + [sig.attr_name('signature') for sig in members if sig.ready_to_sign]
---
# Triggers some questions to ask for signatures on either desktop or mobile
# Allows sending via text/email
id: basic questions signature flow control
code: |
  # Three branches:
  # 1. Decided to sign on the PC
  # 2. Sent someone a link to sign the form
  # 3. Used the QR code
  x.saw_signature_choice
  # Branch 1: PC
  if x.signature_choice == "sign_after_printing":
    define(x.signature, DAEmpty())
  elif x.signature_choice in ['this device', 'this_device']:
    value(x.signature)    
  # Check for Branch 2 or 3
  elif x.signature_choice == 'phone':
    x.saw_signature_qrcode
    # User will click next. link_cell will only be defined if they chose the texting option
    if defined('x.link_cell') and x.link_cell and task_not_yet_performed('send signature link'): 
      # They used the text option
      send_sms(task='send signature link', to=link_cell,template=interview_link)
      x.signature_wait_screen
      value(x.signature)
    else: # Branch 3: They used the QR Code. No special screen, just continue
      value(x.signature)
    # Show the follow-up either way
    if device().is_mobile:
      #signed = False
      #while not signed:
      #  for signature in signature_fields:
      #    signed = defined(signature) & signed
      x.signature_phone_followup
  x.special_signature_flow = True
---
comment: |
  This block is shown when the user texts a link to sign a form
id: signature wait screen
question: |
  % if defined(['x.signature']):
  Thank you for signing.
  % else:
  Sign on your phone
  % endif
subquestion: |
  % if device() and device().is_pc:
  % if defined('x.signature'):
  Click ${word("next")}.
  % else:
  Click ${word("next")} on this screen once you have finished signing on your phone.
  % endif
  % else:
  You have been asked to sign this PDF. Click to review it.    
  ${al_court_bundle.as_pdf('preview')}  
  [Make changes](${url_action('review_all_sections')})

  Click ${word("next")} on this screen when you're ready to sign.
  % endif  
field: x.signature_wait_screen
decoration: file-signature
---
id: signature-phone
question: |
  Sign your forms  
fields:
  - note: |
      1. Open the camera app or barcode reader app on your phone.
      2. Point it at the screen.
      3. Click the link icon that appears on the camera screen.
      4. Click ${word("next")} on your phone.
      
      <center>
      ${interview_url_as_qr()}
      </center>

      ${ collapse_template(help_using_qr_code_template) }
    show if: 
      code: |
        device() and device().is_pc
  - Text me a link instead: x.text_link
    datatype: yesnowide
    show if: 
      code: |
        device() and device().is_pc
  - label: Cell phone number
    field: x.link_cell
    show if: x.text_link
  - note: |
      Click ${word("next")} to add your signature.
    show if: 
      code: |
        device() and not device().is_pc
continue button field: x.saw_signature_qrcode
---
id: signature phone followup
question: |
  Continue on the device you started the interview on
subquestion: |
  Thank you for signing. You can close this browser on your phone.
  Keep going on the computer you started the interview on.
field: x.signature_phone_followup  
---
id: signature choice
decoration: file-signature
question: |
  Your documents are almost ready
subquestion: |
  How do you want to sign them?
fields: 
  - I will sign: x.signature_choice
    input type: radio
    choices:
      - On a phone with my finger: phone
        help: |
          We can text or share a link with your phone on the next screen
      - On a computer with my mouse: this_device
      - On the paper with a pen after I print the documents: sign_after_printing
continue button field: x.saw_signature_choice
---
id: members shares
generic object: ALIndividual
question: |
  What is ${ x }'s membership interest percentage or number of units held?
fields:
  - Percentage/Units: x.units
    datatype: integer
---
generic object: ALIndividual
template: managers[i].person_type_label
content: |
  Is the ${ capitalize(ordinal(i)) } manager a person or an organization?
---
generic object: ALIndividual
template: members[i].person_type_label
content: |
  Is the ${ capitalize(ordinal(i)) } member a person or an organization?
---
id: ssn
question: |
  What is your SSN or ITIN?
fields:
  - SSN or ITIN: users[0].ssn
---
generic object: ALIndividual
id: any other members
question: |
  Are there any other members?
subquestion: |
  % if len(members.elements) > 1:  
  So far you have told us about ${comma_and_list(members.complete_elements())}.
  % endif  
yesno: members.there_is_another 
---
generic object: ALIndividual
id: any other managers
question: |
  Are there any other managers?
subquestion: |
  % if len(managers.elements) > 1:  
  So far you have told us about ${comma_and_list(managers.complete_elements())}.
  % endif  
yesno: managers.there_is_another 
---
generic object: ALIndividual
question: |
  Do you need a formal reimbursement?
yesno: needs_formal_reimbursement
---
generic object: ALIndividual
question: |
  Will the LLC have managers?
yesno: has_managers
---
id: claims
question: |
  Your formal reimbursement
subquestion: |
  You said you need a formal reimbursement. 
  
  Below you can itemize this reimbursement by selecting "${word("Add another")}".
fields: 
  - Describe your formation cost: reimbursements[i].what
  - How much is this formation cost?: reimbursements[i].amount
    datatype: currency
list collect: True
---
generic object: ALIndividual
id: any other managers
question: |
  Are there any other managers?
subquestion: |
  % if len(managers.elements) > 1:  
  So far you have told us about ${comma_and_list(managers.complete_elements())}.
  % endif  
yesno: managers.there_is_another 
---
id: What is the filing entitys name
question: |
  What would you like the name of your LLC to be?
fields:
  - "Name": filing_entity
    maxlength: 85
  - "Secondary name": filing_entity_secondary
    help: |
      If the first name if unavailable we will use this secondary name for your corporation.
---
id: Supplemental Provisions Information
question: |
  Supplemental Provisions/Information
fields:
  - "no label": supplemental
    input type: area
    maxlength: 935
    required: False
---
id: preview LLC_form
question: |
  Preview your form before you sign it
subquestion: |
  Here is a preview of the form you will sign on the next page.   
  
  ${ al_recipient_bundle.as_pdf(key='preview') }

  Click the image to open it in a new tab. Click the "Make changes" button
  to edit your answers.

  ${ action_button_html(url_action('review_LLC_form'), label='Make changes', color='info') }
  
  Remember to come back to this window to continue and sign your form.
continue button field: LLC_form_preview_question    
--- 
id: loading warning screen
question: |
  You have now finished answering all of the interview questions. 
subquestion: |
  Select "Next" to download your forms. 
  
  It may take a few seconds to load.  
continue button field: loading_warning_screen
---
id: incorp form review screen
continue button field: review_LLC_form
question: |
  Review your answers
review:
  - Edit: filing_entity
    button: |
      **Name**:
      ${ filing_entity }
  - Edit: supplemental
    button: |
      **Supplemental**:
      ${ single_paragraph(supplemental) }
    show if: supplemental
  - Edit: users.revisit
    button: |
      **Registered Agent:**

      Name | Address 
      -----------|------------
      % for item in users:
      ${ item.name } | ${ item.address }
      % endfor
  - Edit: authorized_person
    button: |
      **Authorized Person**:
      ${ authorized_person }
  - Edit: managers.revisit
    button: |
      **Managers:**
      
      Name | Address 
      -----------|------------
      % for item in managers:
      ${ item.name } | ${ item.address }
      % endfor
  - Edit: members.revisit
    button: |
      **Members:**

      Name | Address | Units
      -----------|------------|------------
      % for item in members:
      ${ item.name } | ${ item.address } | ${ item.units }
      % endfor
---
continue button field: users.revisit
question: |
  Edit users
subquestion: |
  ${ users.table }

  ${ users.add_action() }
---
table: users.table
rows: users
columns:
  - name: |
      row_item.name.full() if defined("row_item.name.suffix") else ""
  - address: |
      row_item.address.block() if defined("row_item.address.zip") else ""
edit:
  - name.suffix
  - address.zip
confirm: True
---
continue button field: managers.revisit
question: |
  Edit managers
subquestion: |
  ${ managers.table }

  ${ managers.add_action() }
---
table: managers.table
rows: managers
columns:
  - address: |
      row_item.address.block() if defined("row_item.address.address") else ""
  - name: |
      row_item.name.full() if defined("row_item.name.suffix") else ""
edit:
  - address.address
  - name.suffix
confirm: True
---
continue button field: members.revisit
question: |
  Edit members
subquestion: |
  ${ members.table }

  ${ members.add_action() }
---
table: members.table
rows: members
columns:
  - address: |
      row_item.address.block() if defined("row_item.address.address") else ""
  - name: |
      row_item.name.full() if defined("row_item.name.suffix") else ""
edit:
  - address.address
  - name.suffix
confirm: True
---
continue button field: organizer.revisit
question: |
  Edit organizer
subquestion: |
  ${ organizer.table }

  ${ organizer.add_action() }
---
table: organizer.table
rows: organizer
columns:
  - address: |
      row_item.address.block() if defined("row_item.address.state") else ""
  - name: |
      row_item.name.full() if defined("row_item.name.first") else ""
edit:
  - address.state
  - name.first
confirm: True
---
table: members_ledger.table
rows: members
columns:
  - Name of Member: row_item.name.full()
  - Place of Residence: row_item.address.on_one_line()
  - From whom Transferred: |
      "Original Issue"
  - Amount Paid: |
      "N/A"
  - Membership Interest % (or Number of Units) Held: row_item.units
---
id: download LLC_form
event: LLC_form_download
question: |
  Your form is ready to download.
subquestion: |
  Thank you ${users}. Your form is ready to download and deliver.
  
  View, download and send your form below. Click the "Make changes" button to fix any mistakes.

  ${ action_button_html(url_action('review_LLC_form'), label='Make changes', color='info') }
  
  ${ al_user_bundle.download_list_html() }

  ${ al_user_bundle.send_button_html(show_editable_checkbox=False) }
  
  % if LLC_form_publish:
  A copy of your form has been delivered to Reidel Law Offices.
  % else:
  
  #### Something went wrong when we tried to deliver a copy of your documents
  to Reidel Law Offices. 
  
  ${ collapse_template( LLC_form_publish_error_template ) }
  % endif

progress: 100
---
template: LLC_form_publish_error_template
subject: |
  Review error message
content: |
  ```
  ${ str(publish_error) }
  ```
---
objects:
  - LLC_form_attachment: ALDocument.using(title="LLC Form", filename="201_boc.pdf", enabled=True, has_addendum=True)
  - LLC_extra_info: ALDocument.using(title="Addendum", filename="Addendum.pdf", enabled=True, has_addendum=False)
  - Consent_of_Registered_Agent_attachment: ALDocument.using(title="Consent of registered agent", filename="Consent_of_Registered_Agent.pdf", enabled=True, has_addendum=False)
  - first_meeting_minutes: ALDocument.using(title="First Meeting Minutes", filename="First_Meeting_Minutes.pdf", enabled=True, has_addendum=False)
  - LLC_operating_agreement: ALDocument.using(title="LLC Operating Agreement", filename="LLC_operating_agreement.pdf", enabled=True, has_addendum=False)
  - members_ledger: ALTableDocument.using(title="Members Ledger", filename="ledger", enabled=True)
  - business: ALPeopleList
---
objects:
  - al_user_bundle: ALDocumentBundle.using(elements=[LLC_form_attachment, LLC_extra_info, Consent_of_Registered_Agent_attachment, first_meeting_minutes, LLC_operating_agreement, members_ledger], filename="LLC_form_package.pdf", title="All forms to download for your records")
  - al_recipient_bundle: ALDocumentBundle.using(elements=[LLC_form_attachment, LLC_extra_info, Consent_of_Registered_Agent_attachment, first_meeting_minutes, LLC_operating_agreement, members_ledger], filename="LLC_form_package.pdf", title="All forms to download for your records")
---
generic object: ALDocument
attachment:
  variable name: LLC_form_attachment.addendum
  docx template file: LLC_form_attachment_addendum.docx
---
code: |
  if has_managers:
    LLC_form_attachment.overflow_fields['managers'].overflow_trigger = 3
  LLC_form_attachment.overflow_fields['members'].overflow_trigger = 3
  LLC_form_attachment.overflow_fields.gathered = True
---
attachment: 
  - name: LLC_extra_info
    variable name: LLC_extra_info[i]  
    filename: LLC_extra_info
    #skip undefined: True
    docx template file: LLC_extra_info.docx
---
attachment: 
  - name: LLC_operating_agreement
    variable name: LLC_operating_agreement[i]  
    filename: LLC_operating_agreement
    #skip undefined: True
    docx template file: LLC_operating_agreement.docx
---
attachment: 
  - name: first_meeting_minutes
    variable name: first_meeting_minutes[i]  
    filename: first_meeting_minutes
    #skip undefined: True
    docx template file: first_meeting_minutes.docx
---
attachments:
  - name: Consent of Registered Agent attachment
    filename: Consent_of_Registered_Agent     
    variable name: Consent_of_Registered_Agent_attachment[i]
    skip undefined: True
    pdf template file: Consent_of_Registered_Agent.pdf
    fields:
      - "user_name_full": |
          % if users[0].person_type == "ALIndividual":
          ${ users[0] }
          % endif
      - "user_name": |
          % if users[0].person_type == "business":
          ${ users[0] }
          % endif
      - "filing_entity": |
          % if users[0].person_type == "ALIndividual":
          ${ filing_entity }
          % endif
      - "effective_date": |
          % if users[0].person_type == "ALIndividual":
          ${ today(format='M/d/YYYY') }
          % endif
      - "filing_entity_1": |
          % if users[0].person_type == "business":
          ${ filing_entity }
          % endif
      - "authorized_person": |
          % if users[0].person_type == "business":
          ${ authorized_person }
          % endif
      - "effective_date_1": |
          % if users[0].person_type == "business":
          ${ today(format='M/d/YYYY') }
          % endif
      - "signature0": |
          % if users[0].person_type == "ALIndividual":
          ${ users[0].signature if i == 'final' else '' }
          % endif
      - "signature1": |
          % if users[0].person_type == "business":
          ${ users[0].signature if i == 'final' else '' }
          % endif
  - name: incorp form attachment
    filename: LLC_form     
    variable name: LLC_form_attachment[i]        
    skip undefined: True
    pdf template file: 205_boc.pdf
    fields:
      - "filing_entity": ${ filing_entity }
      - "user_is_organization": ${ users[0].person_type == "business" }
      - "user_is_individual": ${ users[0].person_type == "ALIndividual" }
      - "llc_has_managers": ${ has_managers }
      - "llc_does_not_have_managers": ${ not has_managers }
      - "user_name": |
          % if users[0].person_type == "business":
          ${ users[0] }
          % endif
      - "user_name_first": |
          % if users[0].person_type == "ALIndividual":
          ${ users[0].name.first }
          % endif
      - "user_name_middle": |
          % if users[0].person_type == "ALIndividual":
          ${ users[0].name.middle }
          % endif
      - "user_name_last": |
          % if users[0].person_type == "ALIndividual":
          ${ users[0].name.last }
          % endif
      - "user_name_suffix": |
          % if users[0].person_type == "ALIndividual":
          ${ users[0].name.suffix }
          % endif
      - "user_address_street": ${ users[0].address.address }
      - "user_address_city": ${ users[0].address.city }
      - "user_address_zip": ${ users[0].address.zip }
      - "manager_name_organization": |
          % if has_managers and managers[0].person_type == "business":
          ${ managers[0] }
          % elif members[0].person_type == "business":
          ${ members[0] }
          % endif
      - "manager_name_first": |
          % if has_managers and managers[0].person_type == "ALIndividual":
          ${ managers[0].name.first }
          % elif members[0].person_type == "ALIndividual":
          ${ members[0].name.first }
          % endif
      - "manager_name_middle": |
          % if has_managers and managers[0].person_type == "ALIndividual":
          ${ managers[0].name.middle }
          % elif members[0].person_type == "ALIndividual":
          ${ members[0].name.middle }
          % endif
      - "manager_name_last": |
          % if has_managers and managers[0].person_type == "ALIndividual":
          ${ managers[0].name.last }
          % elif members[0].person_type == "ALIndividual":
          ${ members[0].name.last }
          % endif
      - "manager_name_suffix": |
          % if has_managers and managers[0].person_type == "ALIndividual":
          ${ managers[0].name.suffix }
          % elif members[0].person_type == "ALIndividual":
          ${ members[0].name.suffix }
          % endif
      - "manager_address_street": |
          % if has_managers:
          ${ managers[0].address.address }
          % else:
          ${ members[0].address.address }
          % endif
      - "manager_address_city": |
          % if has_managers:
          ${ managers[0].address.city }
          % else:
          ${ members[0].address.city }
          % endif 
      - "manager_address_state": |
          % if has_managers:
          ${ managers[0].address.state }
          % else:
          ${ members[0].address.state }
          % endif 
      - "manager_address_zip": |
          % if has_managers:
          ${ managers[0].address.zip }
          % else:
          ${ members[0].address.zip }
          % endif 
      - "manager_address_country": |
          % if has_managers:
          ${ managers[0].address.country }
          % else:
          ${ members[0].address.country }
          % endif  
      - "manager1_name_organization": |
          % if has_managers and managers[1].person_type == "business":
          ${ managers[1] }
          % elif members[1].person_type == "business":
          ${ members[1] }
          % endif
      - "manager1_name_first": |
          % if has_managers and managers[1].person_type == "ALIndividual":
          ${ managers[1].name.first }
          % elif members[1].person_type == "ALIndividual":
          ${ members[1].name.first }
          % endif
      - "manager1_name_middle": |
          % if has_managers and managers[1].person_type == "ALIndividual":
          ${ managers[1].name.middle }
          % elif members[1].person_type == "ALIndividual":
          ${ members[1].name.middle }
          % endif
      - "manager1_name_last": |
          % if has_managers and managers[1].person_type == "ALIndividual":
          ${ managers[1].name.last }
          % elif members[1].person_type == "ALIndividual":
          ${ members[1].name.last }
          % endif
      - "manager1_name_suffix": |
          % if has_managers and managers[1].person_type == "ALIndividual":
          ${ managers[1].name.suffix }
          % elif members[1].person_type == "ALIndividual":
          ${ members[1].name.suffix }
          % endif
      - "manager1_address_street": |
          % if has_managers:
          ${ managers[1].address.address }
          % else:
          ${ members[1].address.address }
          % endif
      - "manager1_address_city": |
          % if has_managers:
          ${ managers[1].address.city }
          % else:
          ${ members[1].address.city }
          % endif
      - "manager1_address_state": |
          % if has_managers:
          ${ managers[1].address.state }
          % else:
          ${ members[1].address.state }
          % endif
      - "manager1_address_zip": |
          % if has_managers:
          ${ managers[1].address.zip }
          % else:
          ${ members[1].address.zip }
          % endif
      - "manager1_address_country": |
          % if has_managers:
          ${ managers[1].address.country }
          % else:
          ${ members[1].address.country }
          % endif
      - "manager2_name_organization": |
          % if has_managers and managers[2].person_type == "business":
          ${ managers[2] }
          % elif members[2].person_type == "business":
          ${ members[2] }
          % endif
      - "manager2_name_first": |
          % if has_managers and managers[2].person_type == "ALIndividual":
          ${ managers[2].name.first }
          % elif members[2].person_type == "ALIndividual":
          ${ members[2].name.first }
          % endif
      - "manager2_name_middle": |
          % if has_managers and managers[2].person_type == "ALIndividual":
          ${ managers[2].name.middle }
          % elif members[2].person_type == "ALIndividual":
          ${ members[2].name.middle }
          % endif
      - "manager2_name_last": |
          % if has_managers and managers[2].person_type == "ALIndividual":
          ${ managers[2].name.last }
          % elif members[2].person_type == "ALIndividual":
          ${ members[2].name.last }
          % endif
      - "manager2_name_suffix": |
          % if has_managers and managers[2].person_type == "ALIndividual":
          ${ managers[2].name.suffix }
          % elif members[2].person_type == "ALIndividual":
          ${ members[2].name.suffix }
          % endif
      - "manager2_address_street": |
          % if has_managers:
          ${ managers[2].address.address }
          % else:
          ${ members[2].address.address }
          % endif
      - "manager2_address_city": |
          % if has_managers:
          ${ managers[2].address.city }
          % else:
          ${ members[2].address.city }
          % endif
      - "manager2_address_state": |
          % if has_managers:
          ${ managers[2].address.state }
          % else:
          ${ members[2].address.state }
          % endif
      - "manager2_address_zip": |
          % if has_managers:
          ${ managers[2].address.zip }
          % else:
          ${ members[2].address.zip }
          % endif
      - "manager2_address_country": |
          % if has_managers:
          ${ managers[2].address.country }
          % else:
          ${ members[2].address.country }
          % endif
      - "business_address_mailing": ${ business[0].address.address }
      - "business_address_city": ${ business[0].address.city }
      - "business_address_state": ${ business[0].address.state }
      - "business_address_zip": ${ business[0].address.zip }
      - "business_address_country": ${ business[0].address.country }
      - "organizer_name_full1": |
          Schuyler Reidel - Reidel Law Firm
      - "organizer_name_full2": |
          Schuyler Reidel - Reidel Law Firm
      - "organizer_address_street": | 
          527 21st St. #90
      - "organizer_address_city": |
          Galveston
      - "organizer_address_state": |
          TX
      - "organizer_address_zip": |
          77550
      - "supplemental": ${ supplemental }
      - "effective_SOS": ${ True }
      - "effective_date": ${ today(format='M/d/YYYY') }